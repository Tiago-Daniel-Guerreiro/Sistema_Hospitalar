Desenvolver sistema para hospital com python

Obrigatório: 
       herança simples
       multiplas
       polimorfismo
       classes abstratas
       
Quando necessário: 
       listas
       dicionários
       tuplas
       etc

Objetivo:
       Registrar pacientes e funcionarios
       Gerir Consultas e salas

Estrutura geral das Classes
Pessoa (abstrata):
       paciente
       funcionario:
              Medico
              Administrativo
              Enfermeiro
              Administrativo + Enfermeiro:
                     EnfermeiroChefe
 
Estrutura das Salas
Sala(abstrata):
       SalaConsulta
       SalaCirugia
       
Notas:
Sempre que necessário adicionar Classes/Salas/Funcoes
Necessita de um relatório de desenvolvimento
Nota: Nota do Projeto (85%) + Nota de Participação (15%)
Comprometimento e Assecibilidade = bonus de 10% (Max: Nota 20)
Tempo Previsto (7 aulas)

Alerta
Proibido uso de qualquer IA
Se aluno não participar no projeto -50% mas é necessário avisar e se não avisar antes da metade do tempo previsto todos os alunos seram penalizados com os -50%


Sugestão:

Classe Pessoa (Abstrata):
       • __init__(self, nome, idade): inicializa nome e idade.
       • @property nome: retorna o nome da pessoa.
       • @nome.setter: define o nome, apenas se não for vazio.
       • @property idade: retorna a idade da pessoa.
       • @idade.setter: define a idade, apenas se for positiva.
       • exibir_informacoes(self): método abstrato que deverá ser implementado nas subclasses.
       
Classe Paciente:
       • __init__(self, nome, idade, numero_utente): inicializa paciente com nome, idade e número de
       utente.
       • @property numero_utente: retorna o número de utente.
       • adicionar_registro(self, descricao): adiciona uma entrada ao histórico médico.
       • mostrar_historico(self): exibe o histórico médico do paciente.
       • exibir_informacoes(self): mostra nome, idade e número de utente.

Classe Funcionario:
       • __init__(self, nome, idade, cargo, salario): inicializa dados do funcionário.
       • @property salario: retorna o salário atual.
       • @salario.setter: atualiza o salário, impedindo valores negativos.
       • mostrar_informacoes(self): exibe nome, cargo e salário.
       • aplicar_aumento(self, percentual): aumenta o salário com base em um percentual.

Classe Medico:
       • __init__(self, nome, idade, salario_base, especialidade): inicializa médico com especialidade e
       salário base.
       • @property especialidade: retorna a especialidade do médico.
       • @especialidade.setter: define a especialidade, desde que não seja vazia.
       • adicionar_paciente(self, paciente): adiciona paciente à lista de atendidos.
       • listar_pacientes(self): mostra todos os pacientes do médico.
       • calcular_pagamento(self): retorna salário base + valor fixo por paciente atendido.
       • exibir_informacoes(self): exibe nome, especialidade e número de pacientes.

Classe Enfermeiro:
       • __init__(self, nome, idade, salario_base, turno): inicializa enfermeiro com turno (dia/noite).
       • @property turno: retorna o turno atual.
       • @turno.setter: define o turno apenas se for "dia" ou "noite".
       • adicionar_paciente(self, paciente): adiciona paciente sob cuidado.
       • listar_pacientes(self): exibe pacientes sob responsabilidade.
       • calcular_pagamento(self): retorna salário base + adicional conforme o turno.
       • exibir_informacoes(self): exibe nome, turno e total de pacientes.

Classe Administrativo:
       • __init__(self, nome, idade, salario_base, setor): inicializa funcionário administrativo com setor e
       salário base.
       • @property setor: retorna o setor de atuação.
       • @setor.setter: define o setor apenas se for válido.
       • registrar_horas(self, horas): acumula horas trabalhadas.
       • calcular_pagamento(self): retorna salário base + valor por hora registrada.
       • exibir_informacoes(self): mostra nome, setor e total de horas trabalhadas.

Classe EnfermeiroChefe:
       • __init__(self, nome, idade, salario_base, turno, setor, bonus_chefia): inicializa o híbrido com
       dados de enfermeiro e administrativo.
       • @property bonus_chefia: retorna o bônus adicional.
       • @bonus_chefia.setter: define o bônus apenas se for positivo.
       • calcular_pagamento(self): combina o pagamento de enfermeiro e administrativo + bônus de
       chefia.
       • exibir_informacoes(self): mostra nome, turno, setor e pacientes sob cuidado.

Classe Sala (abstrata)
       • __init__(self, numero, capacidade): inicializa a sala com número e capacidade máxima.
       • @property numero: retorna o número da sala.
       • @numero.setter: define o número apenas se for positivo.
       • @property capacidade: retorna a capacidade da sala.
       • @capacidade.setter: define capacidade apenas se for maior que zero.
       • detalhar_sala(self): método abstrato para descrição da sala.

Classe SalaConsulta (herda de Sala)
       • __init__(self, numero, capacidade, medico_responsavel): inicializa sala de consulta com médico
       e pacientes.
       • @property medico_responsavel: retorna o médico responsável.
       • @medico_responsavel.setter: define o médico apenas se for uma instância válida de Médico.
       • agendar_consulta(self, paciente): adiciona paciente à lista de consultas.
       • detalhar_sala(self): exibe número, capacidade e nome do médico responsável.

Classe SalaCirurgia (herda de Sala)
       • __init__(self, numero, capacidade): inicializa sala de cirurgia com número e capacidade.
       • adicionar_equipamento(self, equipamento): adiciona equipamento à lista.
       • detalhar_sala(self): exibe número, capacidade e lista de equipamentos.

Classe Consulta (OPCIONAL):
       • __init__(self, medico, paciente, data, tipo): cria a ligação entre médico e paciente com data e
       tipo (rotina, emergência, etc.).
       • @property tipo: retorna o tipo da consulta.
       • @tipo.setter: define o tipo apenas se for string válida.
       • exibir_detalhes(self): mostra informações do médico, paciente e tipo de consulta.

